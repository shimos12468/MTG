//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Project/Runtime/Scripts/Singletons/EnviromentSceneInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EnviromentSceneInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EnviromentSceneInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EnviromentSceneInput"",
    ""maps"": [
        {
            ""name"": ""GeneralInputs"",
            ""id"": ""f3979002-95b8-45c1-996e-767d76a3f882"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""d7819d5d-82fd-4aaa-9527-25601b82535b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapBetweenCreatures"",
                    ""type"": ""Button"",
                    ""id"": ""2a31a9f2-9158-43bb-bd7c-ee280f5e6651"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FoucsPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""3035f0aa-7df5-4848-ae51-c0472b0a4c95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b5ff4dc-4b05-492a-bdbe-aaa24dcb30a3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50e0dfed-d2bc-4bb9-9e20-015398dfbb87"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapBetweenCreatures"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""537b93d4-7f0f-4c51-91dc-cbb447749cbc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FoucsPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Creature"",
            ""id"": ""6cbb12c1-0309-46a8-b499-8c20dad85a5b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""762c3dcd-89d4-430e-bb76-fca91f6a452a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""764a7556-97fd-4a54-9d54-b8dcede89aa2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""player"",
            ""id"": ""be122182-30c3-4499-b309-201b1dd6f8b3"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""f9bc3145-bfdb-4629-9b9f-6f6abcdd3aab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""afe0738b-db64-4495-a256-af7ae2ab3d6f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GeneralInputs
        m_GeneralInputs = asset.FindActionMap("GeneralInputs", throwIfNotFound: true);
        m_GeneralInputs_Escape = m_GeneralInputs.FindAction("Escape", throwIfNotFound: true);
        m_GeneralInputs_SwapBetweenCreatures = m_GeneralInputs.FindAction("SwapBetweenCreatures", throwIfNotFound: true);
        m_GeneralInputs_FoucsPlayer = m_GeneralInputs.FindAction("FoucsPlayer", throwIfNotFound: true);
        // Creature
        m_Creature = asset.FindActionMap("Creature", throwIfNotFound: true);
        m_Creature_Newaction = m_Creature.FindAction("New action", throwIfNotFound: true);
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_Newaction = m_player.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GeneralInputs
    private readonly InputActionMap m_GeneralInputs;
    private IGeneralInputsActions m_GeneralInputsActionsCallbackInterface;
    private readonly InputAction m_GeneralInputs_Escape;
    private readonly InputAction m_GeneralInputs_SwapBetweenCreatures;
    private readonly InputAction m_GeneralInputs_FoucsPlayer;
    public struct GeneralInputsActions
    {
        private @EnviromentSceneInput m_Wrapper;
        public GeneralInputsActions(@EnviromentSceneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_GeneralInputs_Escape;
        public InputAction @SwapBetweenCreatures => m_Wrapper.m_GeneralInputs_SwapBetweenCreatures;
        public InputAction @FoucsPlayer => m_Wrapper.m_GeneralInputs_FoucsPlayer;
        public InputActionMap Get() { return m_Wrapper.m_GeneralInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralInputsActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralInputsActions instance)
        {
            if (m_Wrapper.m_GeneralInputsActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnEscape;
                @SwapBetweenCreatures.started -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnSwapBetweenCreatures;
                @SwapBetweenCreatures.performed -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnSwapBetweenCreatures;
                @SwapBetweenCreatures.canceled -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnSwapBetweenCreatures;
                @FoucsPlayer.started -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnFoucsPlayer;
                @FoucsPlayer.performed -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnFoucsPlayer;
                @FoucsPlayer.canceled -= m_Wrapper.m_GeneralInputsActionsCallbackInterface.OnFoucsPlayer;
            }
            m_Wrapper.m_GeneralInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @SwapBetweenCreatures.started += instance.OnSwapBetweenCreatures;
                @SwapBetweenCreatures.performed += instance.OnSwapBetweenCreatures;
                @SwapBetweenCreatures.canceled += instance.OnSwapBetweenCreatures;
                @FoucsPlayer.started += instance.OnFoucsPlayer;
                @FoucsPlayer.performed += instance.OnFoucsPlayer;
                @FoucsPlayer.canceled += instance.OnFoucsPlayer;
            }
        }
    }
    public GeneralInputsActions @GeneralInputs => new GeneralInputsActions(this);

    // Creature
    private readonly InputActionMap m_Creature;
    private ICreatureActions m_CreatureActionsCallbackInterface;
    private readonly InputAction m_Creature_Newaction;
    public struct CreatureActions
    {
        private @EnviromentSceneInput m_Wrapper;
        public CreatureActions(@EnviromentSceneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Creature_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Creature; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreatureActions set) { return set.Get(); }
        public void SetCallbacks(ICreatureActions instance)
        {
            if (m_Wrapper.m_CreatureActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_CreatureActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_CreatureActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_CreatureActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_CreatureActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public CreatureActions @Creature => new CreatureActions(this);

    // player
    private readonly InputActionMap m_player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_player_Newaction;
    public struct PlayerActions
    {
        private @EnviromentSceneInput m_Wrapper;
        public PlayerActions(@EnviromentSceneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_player_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public PlayerActions @player => new PlayerActions(this);
    public interface IGeneralInputsActions
    {
        void OnEscape(InputAction.CallbackContext context);
        void OnSwapBetweenCreatures(InputAction.CallbackContext context);
        void OnFoucsPlayer(InputAction.CallbackContext context);
    }
    public interface ICreatureActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
